import asyncio
import random
import sqlite3
import aiohttp
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from fastapi import FastAPI, Request
from aiogram.types import Message
import uvicorn

# === CONFIG ===
BOT_TOKEN = "7817746094:AAGGoYbMgkBhQJbjfWAU3P18c9xSIeh3RUU"
CRYPTOBOT_API = "374433:AAQ3pNU1GwWOm8OUxBH5dSqXhWqgUiApDpo"
CRYPTOBOT_WEBHOOK_SECRET = "your_secret"
CRYPTOBOT_URL = "https://pay.crypt.bot/api/createInvoice"
COMMISSION_PERCENT = 5

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

app = FastAPI()

# === DATABASE ===
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    balance REAL DEFAULT 0
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    amount REAL,
    detail TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
""")
conn.commit()

# === FSM ===
class GameStates(StatesGroup):
    choosing_amount = State()

class WithdrawStates(StatesGroup):
    entering_amount = State()
    entering_wallet = State()

class DepositStates(StatesGroup):
    waiting_for_amount = State()

# === TEMP MEMORY ===
temp_bets = {}
temp_withdraw = {}
temp_invoices = {}
temp_check = {}

# === KEYBOARDS ===
main_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üé≤ –ò–≥—Ä–∞—Ç—å")],
    [KeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å"), KeyboardButton(text="üì¶ –í—ã–≤–µ—Å—Ç–∏")],
    [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
])

# === UTILS ===
def get_balance(user_id):
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    return row[0] if row else 0

def update_balance(user_id, amount):
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()

def log_transaction(user_id, type, amount, detail=""):
    cursor.execute("INSERT INTO transactions (user_id, type, amount, detail) VALUES (?, ?, ?, ?)",
                   (user_id, type, amount, detail))
    conn.commit()

async def create_crypto_invoice(amount: float, user_id: int):
    data = {
        "asset": "USDT",
        "amount": amount,
        "description": f"Deposit for user {user_id}",
        "hidden_message": "Thanks for the deposit!",
        "paid_btn_name": "openBot",
        "paid_btn_url": f"https://t.me/casino_lud_bot?start={user_id}"
    }
    headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API}

    async with aiohttp.ClientSession() as session:
        async with session.post(CRYPTOBOT_URL, data=data, headers=headers) as resp:
            res = await resp.json()
            if not res.get("ok"):
                raise Exception(f"–û—à–∏–±–∫–∞ –æ—Ç API: {res.get('error')}")

            invoice_id = res["result"]["invoice_id"]
            pay_url = res["result"]["pay_url"]

            cursor.execute("INSERT INTO invoices (invoice_id, user_id, amount, status) VALUES (?, ?, ?, ?)",
                           (invoice_id, user_id, amount, "pending"))
            conn.commit()

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîó –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)
            keyboard.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice_id}")
            return keyboard.as_markup()

# === HANDLERS ===
@router.message(F.text == "/start")
async def start(msg: types.Message):
    update_balance(msg.from_user.id, 0)
    await msg.answer("üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É–±–∏–∫-–±–æ—Ç!", reply_markup=main_kb)

@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def balance(msg: types.Message):
    bal = get_balance(msg.from_user.id)
    await msg.answer(f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {bal:.2f} USDT")

@router.message(F.text == "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
async def deposit(msg: types.Message, state: FSMContext):
    await msg.answer("üí≥ –í–≤–µ–¥–∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USDT:")
    await state.set_state(DepositStates.waiting_for_amount)

@router.message(F.text == "üé≤ –ò–≥—Ä–∞—Ç—å")
async def start_game(msg: types.Message, state: FSMContext):
    await msg.answer("üíµ –í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
    await state.set_state(GameStates.choosing_amount)

@router.message(F.text == "üì¶ –í—ã–≤–µ—Å—Ç–∏")
async def ask_withdraw_amount(msg: types.Message, state: FSMContext):
    await msg.answer("üí∏ –í–≤–µ–¥–∏ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:")
    await state.set_state(WithdrawStates.waiting_for_amount)

class GameStates(StatesGroup):
    choosing_amount = State()
    choosing_bet_type = State()


@router.message(GameStates.choosing_amount)
async def get_bet_amount(msg: types.Message, state: FSMContext):
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        amount_text = msg.text.strip().replace(",", ".")

        # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤ amount_text
        print(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Å—Ç–∞–≤–∫–∏: '{amount_text}'")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
        if not amount_text:
            await msg.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É. –ü—Ä–∏–º–µ—Ä: 0.5, 1.25, 10")
            return

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        amount = float(amount_text)
        amount = round(amount, 2)  # –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        print(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {amount}")

        balance = get_balance(msg.from_user.id)
        print(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {balance}")

        if amount <= 0:
            await msg.answer("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        if amount > balance:
            await msg.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.update_data(bet_amount=amount)
        await state.set_state(GameStates.choosing_bet_type)
        await msg.answer("üéØ –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:", reply_markup=bet_type_kb())

    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏: {e}")
        await msg.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 0.5, 1.25, 10")

def bet_type_kb():
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    keyboard.button(text="–ß—ë—Ç", callback_data="bet_even")  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏ –Ω–∞ —á—ë—Ç
    keyboard.button(text="–ù–µ—á—ë—Ç", callback_data="bet_odd")  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏ –Ω–∞ –Ω–µ—á–µ—Ç

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    return keyboard.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏
@router.callback_query(lambda c: c.data.startswith("bet_"))
async def process_bet(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    amount = data["bet_amount"]

    bet_type = callback.data.split("_")[1]  # even / odd

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–±–∏–∫
    dice_msg = await callback.message.answer_dice(emoji="üé≤")

    # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–æ–∫–æ–ª–æ 3-4 —Å–µ–∫—É–Ω–¥ ‚Äî –Ω–æ –º—ã —Ç–æ—á–Ω–æ –¥–æ–∂–¥—ë–º—Å—è —á–µ—Ä–µ–∑ message.dice.value)
    await asyncio.sleep(3.5)  # –ú–æ–∂–Ω–æ –∏ –±–µ–∑ —ç—Ç–æ–≥–æ, –Ω–æ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏

    roll = dice_msg.dice.value  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
    win = False
    payout = round(amount * 1.9, 2)

    # –õ–æ–≥–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    if bet_type == "even" and roll % 2 == 0:
        win = True
    elif bet_type == "odd" and roll % 2 == 1:
        win = True

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    update_balance(callback.from_user.id, -amount)
    log_transaction(callback.from_user.id, "game_bet", -amount, f"–ë—Ä–æ—Å–æ–∫: {roll}, –°—Ç–∞–≤–∫–∞: {bet_type}")

    if win:
        update_balance(callback.from_user.id, payout)
        log_transaction(callback.from_user.id, "game_win", payout, f"–í—ã–∏–≥—Ä—ã—à –∑–∞ —Å—Ç–∞–≤–∫—É: {bet_type}")
        await callback.message.answer(
            f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {roll}\nüéâ –ü–æ–±–µ–¥–∞! –¢—ã –ø–æ–ª—É—á–∏–ª +{payout:.2f} USDT (–º–Ω–æ–∂–∏—Ç–µ–ª—å 1.9x)"
        )
    else:
        await callback.message.answer(
            f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {roll}\nüí∏ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {amount:.2f} USDT"
        )

    await state.clear()
    await callback.answer()

@router.message(DepositStates.waiting_for_amount)
async def handle_deposit_amount(msg: types.Message, state: FSMContext):
    try:
        amount = float(msg.text)
        commission = amount * COMMISSION_PERCENT / 100
        total = amount + commission
        markup = await create_crypto_invoice(total, msg.from_user.id)
        log_transaction(msg.from_user.id, "deposit", total, "–ó–∞–ø—Ä–æ—Å –∏–Ω–≤–æ–π—Å–∞")
        await msg.answer(
            f"–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount:.2f} USDT\n–ö–æ–º–∏—Å—Å–∏—è: {commission:.2f} USDT\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total:.2f} USDT",
            reply_markup=markup
        )
        await state.clear()
    except Exception as e:
        await msg.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.\n–û—à–∏–±–∫–∞: {e}")

@router.callback_query(F.data.startswith("check_"))
async def check_invoice_status(callback: CallbackQuery):
    invoice_id = callback.data.split("_", 1)[1]
    url = "https://pay.crypt.bot/api/getInvoices"
    headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API}
    data = {"invoice_ids": [invoice_id]}

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data, headers=headers) as resp:
            res = await resp.json()
            if not res.get("ok"):
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ.", show_alert=True)
                return

            invoice = res["result"]["items"][0]
            status = invoice["status"]
            amount = float(invoice["amount"])
            user_id = int(invoice["description"].split()[-1])

            if status == "paid":
                cursor.execute("SELECT status FROM invoices WHERE invoice_id = ?", (invoice_id,))
                row = cursor.fetchone()
                if row and row[0] == "paid":
                    await callback.answer("üí∞ –û–ø–ª–∞—Ç–∞ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–∞!", show_alert=True)
                    return

                update_balance(user_id, amount)
                log_transaction(user_id, "deposit", amount, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä—É—á–Ω—É—é")
                cursor.execute("UPDATE invoices SET status = 'paid' WHERE invoice_id = ?", (invoice_id,))
                conn.commit()

                await callback.message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount:.2f} USDT –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ —Ç–≤–æ–π —Å—á—ë—Ç.")
            else:
                await callback.answer("‚ùå –ü–ª–∞—Ç—ë–∂ –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.", show_alert=True)

class WithdrawStates(StatesGroup):
    waiting_for_amount = State()
MIN_WITHDRAW = 0.1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞

API_TOKEN = "374433:AAQ3pNU1GwWOm8OUxBH5dSqXhWqgUiApDpo"


async def create_crypto_bot_check(amount: float, user_id: int) -> InlineKeyboardMarkup:
    url = "https://pay.crypt.bot/api/createCheck"
    headers = {
        "Content-Type": "application/json",
        "Crypto-Pay-API-Token": API_TOKEN  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    }
    payload = {
        "asset": "USDT",
        "amount": amount,
        "description": f"–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as response:
            data = await response.json()
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print(f"–û—Ç–≤–µ—Ç –æ—Ç API: {data}")
            if data.get("ok") and "result" in data:
                result = data["result"]
                if "bot_check_url" in result:
                    pay_url = result["bot_check_url"]
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'bot_check_url' –≤ –æ—Ç–≤–µ—Ç–µ: {result}")
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {data}")

    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="üí∏ –ó–∞–±—Ä–∞—Ç—å —á–µ–∫", url=pay_url)
    )

    print(f"–°–æ–∑–¥–∞–Ω —á–µ–∫ –Ω–∞ —Å—É–º–º—É {amount}. –°—Å—ã–ª–∫–∞: {pay_url}")

    return keyboard.as_markup()


@router.message(WithdrawStates.waiting_for_amount)
async def process_withdraw_amount(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    balance = get_balance(user_id)

    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        amount = float(msg.text.replace(",", "."))
    except ValueError:
        await msg.answer("‚ùó –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    if amount < MIN_WITHDRAW:
        await msg.answer(f"‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ ‚Äî {MIN_WITHDRAW} USDT.")
        return

    if amount > balance:
        await msg.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å–æ–∑–¥–∞—ë–º —á–µ–∫
    update_balance(user_id, -amount)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–µ–∫-—Å—Å—ã–ª–∫–æ–π
    check_keyboard = await create_crypto_bot_check(amount=amount, user_id=user_id)

    if check_keyboard:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞
        await msg.answer(f"‚úÖ –ß–µ–∫ –Ω–∞ {amount:.2f} USDT —Å–æ–∑–¥–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –¥–ª—è –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è:",
                         reply_markup=check_keyboard)
        log_transaction(user_id, "withdraw", -amount, f"–°–æ–∑–¥–∞–Ω —á–µ–∫ –Ω–∞ –≤—ã–≤–æ–¥")
    else:
        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        update_balance(user_id, +amount)  # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    await state.clear()

def get_transaction_history(user_id: int) -> list[dict]:
    cursor.execute("SELECT type, amount, timestamp, detail FROM transactions WHERE user_id = ? ORDER BY timestamp DESC", (user_id,))
    rows = cursor.fetchall()
    history = []
    for row in rows:
        history.append({
            "type": row[0],
            "amount": row[1],
            "timestamp": row[2],
            "description": row[3]
        })
    return history

@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_history(msg: Message):
    user_id = msg.from_user.id
    history = get_transaction_history(user_id)

    if not history:
        await msg.answer("‚ùó –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b>\n\n"

    for tx in history[-10:][::-1]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π (–º–æ–∂–µ—à—å —É–±—Ä–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
        action = "‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if tx["type"] == "deposit" else "‚ûñ –í—ã–≤–æ–¥"
        amount = tx["amount"]
        timestamp = tx["timestamp"]
        description = tx.get("description", "")
        text += f"{action} –Ω–∞ <b>{amount:.2f} USDT</b>\nüïì <i>{timestamp}</i>\n{description}\n\n"

    await msg.answer(text)

# === BOT START ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import threading
    threading.Thread(target=lambda: uvicorn.run(app, host="0.0.0.0", port=8000)).start()
    asyncio.run(main())
